# -*- coding: utf-8 -*-
"""permutation_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lgqwPzT8NaU8joI1P9hidN3Uie3UGDUN
"""

import numpy as np

# stat = lambda y_pred: accuracy(y_true, y_pred)
# run_permutation_test(a=pred_a, b=pred_b, stat=stat)
# the smaller the p-value, the greater the evidence against the null hypothesis

def run_permutation_test(a, b, stat=np.mean, seed=1234, n_samples=10**5, mode='greater'):
    """http://www2.stat.duke.edu/~ar182/rr/examples-gallery/PermutationTest.html
    https://www.mathstat.dal.ca/~stat2080/Fall14/Lecturenotes/permutation.pdf
    h0: stat(a) = stat(b)
    h1: stat(a) > stat(b) if mode = 'smaller'
    h1: stat(b) > stat(a) if mode = 'greater'
    """
    #assert a.size == b.size
    pool = np.hstack((a,b))
    if mode == 'smaller':
      diff_obs = stat(a) - stat(b)
    elif mode == 'greater':
      diff_obs = stat(b) - stat(a)
    prng = np.random.RandomState(seed)
    diffs = []
    
    for _ in range(n_samples):
        prng.shuffle(pool)

        star_a = pool[:a.size]
        star_b = pool[-b.size:]
        
        diffs += [stat(star_a) - stat(star_b)]
    
    diff_count = len(np.where(diffs >= diff_obs)[0])
    p_value = (float(diff_count)/float(n_samples))
    
    return p_value

control = np.array([10, 9, 11])
better = np.array([12, 11, 13])
run_permutation_test(better, control, mode='smaller')

control = np.array([10, 9, 11])
better = np.array([12, 11, 13])
run_permutation_test(control, better, mode='greater')

control = np.array([175, 250, 260])
treatment = np.array([255 ,275, 300])
run_permutation_test(treatment, control, mode='smaller')

control = np.array([175, 250, 260])
treatment = np.array([255 ,275, 300])
run_permutation_test(control, treatment, mode='greater')

"""####  fail to reject the null hypothesis"""

treatment = np.array([94,197,16,38,99,141,23])
control = np.array([52,104,146,10,51,30,40,27,46])
run_permutation_test(treatment, control, mode='smaller')

treatment = np.array([94,197,16,38,99,141,23])
control = np.array([52,104,146,10,51,30,40,27,46])
run_permutation_test(control, treatment, mode='greater')

"""### https://rosettacode.org/wiki/Permutation_test#Python"""

# https://www.thoughtco.com/example-of-a-permutation-test-3997741

from itertools import combinations as comb
 
def permutationTest(a, b):
    ab = a + b
    Tobs = sum(a)
    under = 0
    for count, perm in enumerate(comb(ab, len(a)), 1):
        if sum(perm) <= Tobs:
            under += 1
    return under * 100. / count
  
c = [10, 9, 11]
d = [12, 11, 13]
pvalue = permutationTest(c, d)
print("under=%.2f%%, over=%.2f%%" % (pvalue, 100. - pvalue))
pvalue/100.0, 1.0 - pvalue/100.